Object subclass: #Cliente	instanceVariableNames: 'nombre'	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!Cliente methodsFor: 'initialization' stamp: 'Anonymous 9/23/2020 12:24'!setNombreCliente: nombrecliente	"se setea el nombre del cliente y lo retorna"					nombre:= nombrecliente .! !Cliente subclass: #ClienteEmpresa	instanceVariableNames: 'cuit'	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!ClienteEmpresa methodsFor: 'initialization' stamp: 'Anonymous 9/23/2020 12:24'!setCuitEmpresa: cuitempresa			"Setea el nombre de una Empresa y la retorna "					cuit:= cuitempresa.! !Cliente subclass: #ClientePersona	instanceVariableNames: 'apellido dni'	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!ClientePersona methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:25'!getDni^dni."se utiliza para obtener como retorno el DNI de la persona"! !!ClientePersona methodsFor: 'initialization' stamp: 'Anonymous 9/23/2020 12:25'!setApellidoCliente: apellidocliente setDNICliente: dnicliente	dni:= dnicliente .   apellido:= apellidocliente .   "Se utiliza para setear el Apellido y el DNI del cliente Persona"! !Object subclass: #Comercio	instanceVariableNames: 'nombre cuit productos pedidos contador pedidosEnviados pedidosDescargados pedidosEntregados'	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!Comercio methodsFor: 'initialization' stamp: 'Anonymous 9/23/2020 12:38'!setCuit: cuitcomercio		cuit := cuitcomercio.	"Esta funcion seta el cuit del comercio"! !!Comercio methodsFor: 'initialization' stamp: 'Anonymous 9/23/2020 12:38'!setNombre: nombrecomercio		nombre:= nombrecomercio.	"Esta funcion setea el nombre del comercio"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:31'!getCuit^cuit."se utiliza para obtener el cuit del comercio"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:32'!inicializar contador:=0.pedidosDescargados := OrderedCollection new.pedidosEnviados := OrderedCollection new.pedidosEntregados := OrderedCollection new.productos := OrderedCollection new.pedidos  := OrderedCollection  new."crea las instancias pedidosDescargados, pedidosEnviados, pedidosEntregados, productos y pedidos"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:35'!pedidosEntregadosDesde: fecha|fechaComparar aux|aux:= Pedido new.fechaComparar := fecha asDate . "Escribir la fecha en ingles."pedidosEnviados  do:[:j|j getFecha =fechaComparar ifTrue:[		aux setCliente: (j getCliente ) setFecha:(j getFecha ) 		setIdPedido: (j getIdPedido ) setProducto: (j getProducto ) 		setTotal: (j getTotal ) setCuitComercio: (j getCuit ). 		pedidosEntregados  add: aux. ] ]."Se utliza para poder decir que productos fueron entregados en una fecha determinada "! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:31'!esVerduleria ^false."Valor de verdad de del tipo de comercio"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:38'!productoCarniceria: nombreP			|nombreFinal|	nombreFinal:= (nombreP asLowercase).		^ productos select: [ :producto | (((producto getNombreProducto ) asLowercase) includesSubstring: nombreFinal) & (producto getStock )> 0 ]."Se utiliza para buscar un productos que posean un nombre similar en un tipo de comercio especifico""Retorna todos los productos con ese nombre""Aclaraciones:    * Lo que hace el select es esto:        - Crea una variable auxiliar :producto, que va a ser cada producto que est‚Äö√†√∂¬¨¬© recorriendo.        - Despues hace (producto getNombreProducto) que devuelve el nombre del producto que est‚Äö√†√∂¬¨‚àû recorriendo.        - A ese nombre que obtuvo lo convierte a minuscula.        - Y se fija si ese nombre pasado a minuscula contiene el nombre que vino de argumento (el cual ya estaba en minuscula)."! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:31'!esPanaderia ^false."Valor de verdad de del tipo de comercio"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:29'!agregarPedido:idCliente pedidoComercio:cuitComercio pedidoProductos: listaItems| temp codigoP cant produc item |contador:=contador +1.item:=Array new:2.item at:1 put:(listaItems at:1). item at:2 put:(listaItems at:2).temp:= Pedido new.		  codigoP:=(item  at:1). cant:=(item  at:2). 		produc:=productos detect: [:i | i getIdProducto = codigoP].	produc getStock>=cant ifTrue: [		temp setCliente: idCliente setFecha:(Date today) setIdPedido:contador    	   setProducto:codigoP   setTotal:cant  	   setCuitComercio:cuitComercio.		produc actualizarStock: ((produc getStock )-(cant)).		pedidos add:temp.		^temp.		]ifFalse:[^nil.].     "lo que se realiza en esta funcion es agregar un pedido mediante los parametros idCliente, cuitComercio y listaIteam"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:34'!marcarPedidoEnviado: nroIdentificacion |aux| aux:= Pedido new.pedidosDescargados do:[:j|j getIdPedido = nroIdentificacion ifTrue:[		aux setCliente: (j getCliente ) setFecha:(Date today) 		setIdPedido: (j getIdPedido ) setProducto: (j getProducto ) 		setTotal: (j getTotal ) setCuitComercio: (j getCuit ). 		pedidosEnviados add: aux. ] ]."Esta funcion se utiliza para poder asignar que pedidos ya fueron enviados se usa el nroIdentificacion como parametro para buscar los productos y poder marcarlos como enviados"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:32'!importeTotalVentasDia: fecha|buscarFecha resultado|resultado:=0.buscarFecha := fecha asDate.pedidos  do:[:j|j getFecha = buscarFecha ifTrue: [		productos do:[:x|x getIdProducto=j getProducto ifTrue:[				resultado:= (resultado + x getPrecio) * j getTotal . 				] ]]].	^resultado."se utiliza para llevar un importe todas las ventas presente en el día de un comercio"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:31'!esDietetica ^false."Valor de verdad de del tipo de comercio"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:30'!agregarProducto: datosProducto1 | produc aux |    produc:= Producto new.      produc setiDProducto:(datosProducto1 at:1)      setNombreProducto: (datosProducto1 at:2)       agregarDescripcion:(datosProducto1 at:3)      setprecioProducto: (datosProducto1 at:4)       setStock: (datosProducto1 at:5).      aux:=productos  detect:[ :j | j getIdProducto = (datosProducto1 at:1)]ifNone:[ productos add:produc ]. ^aux."Esta funcion crea una nueva instancia donde se almacenan los datos del Prducto creado "! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:31'!esCarniceria ^false."Valor de verdad de del tipo de comercio"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:27'!actualizarStock: codProducto nuevoValor:cantidad |retorno|retorno:=productos detect:[:j|j getIdProducto =codProducto ].retorno actualizarStock: cantidad.^retorno."Esta funcion obtiene los productos almacenados a travez de un codProducto y actualiza la cantidad de Stock"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:30'!descargarPedidos: fecha|fechaComparar aux|aux:= Pedido new.fechaComparar := fecha asDate . "Escribir la fecha en ingles."pedidos do:[:j|j getFecha =fechaComparar ifTrue:[		aux setCliente: (j getCliente ) setFecha:(j getFecha ) 		setIdPedido: (j getIdPedido ) setProducto: (j getProducto ) 		setTotal: (j getTotal ) setCuitComercio: (j getCuit ). 		pedidosDescargados add: aux. ] ]."Esta funcion se utiliza para obtener todos los pedidos que fueron realizados en una fecha especifica"! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:38'!productoDietetica: nombreP			|nombreFinal|	nombreFinal:= (nombreP asLowercase).		^ productos select: [ :producto | (((producto getNombreProducto ) asLowercase) includesSubstring: nombreFinal) & (producto getStock )> 0 ]."Se utiliza para buscar un productos que posean un nombre similar en un tipo de comercio especifico""Retorna todos los productos con ese nombre""Aclaraciones:    * Lo que hace el select es esto:        - Crea una variable auxiliar :producto, que va a ser cada producto que est‚Äö√†√∂¬¨¬© recorriendo.        - Despues hace (producto getNombreProducto) que devuelve el nombre del producto que est‚Äö√†√∂¬¨‚àû recorriendo.        - A ese nombre que obtuvo lo convierte a minuscula.        - Y se fija si ese nombre pasado a minuscula contiene el nombre que vino de argumento (el cual ya estaba en minuscula)."! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:37'!productoPanaderia: nombreP			|nombreFinal|	nombreFinal:= (nombreP asLowercase).		^ productos select: [ :producto | (((producto getNombreProducto ) asLowercase) includesSubstring: nombreFinal) & (producto getStock )> 0 ]."Se utiliza para buscar un productos que posean un nombre similar en un tipo de comercio especifico""Retorna todos los productos con ese nombre""Aclaraciones:    * Lo que hace el select es esto:        - Crea una variable auxiliar :producto, que va a ser cada producto que est‚Äö√†√∂¬¨¬© recorriendo.        - Despues hace (producto getNombreProducto) que devuelve el nombre del producto que est‚Äö√†√∂¬¨‚àû recorriendo.        - A ese nombre que obtuvo lo convierte a minuscula.        - Y se fija si ese nombre pasado a minuscula contiene el nombre que vino de argumento (el cual ya estaba en minuscula)."! !!Comercio methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:37'!productoVerduleria: nombreP			|nombreFinal|	nombreFinal:= (nombreP asLowercase).		^ productos select: [ :producto | (((producto getNombreProducto ) asLowercase) includesSubstring: nombreFinal) &(producto getStock) > 0 ]."Se utiliza para buscar un productos que posean un nombre similar en un tipo de comercio especifico""Retorna todos los productos con ese nombre""Aclaraciones:    * Lo que hace el select es esto:        - Crea una variable auxiliar :producto, que va a ser cada producto que est‚Äö√†√∂¬¨¬© recorriendo.        - Despues hace (producto getNombreProducto) que devuelve el nombre del producto que est‚Äö√†√∂¬¨‚àû recorriendo.        - A ese nombre que obtuvo lo convierte a minuscula.        - Y se fija si ese nombre pasado a minuscula contiene el nombre que vino de argumento (el cual ya estaba en minuscula)."! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Comercio class	instanceVariableNames: ''!!Comercio class methodsFor: 'instance creation'!new| temp |temp := super new.temp inicializar.^temp.! !Comercio subclass: #Carniceria	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!Carniceria methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:39'!esCarniceria^true."Valor de verdad del tipo de comercio"! !Comercio subclass: #Dietetica	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!Dietetica methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:39'!esDietetica^true."Valor de verdad del tipo de comercio"! !Object subclass: #GestorPublicacion	instanceVariableNames: 'comercio cliente'	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:46'!inicializar	comercio:= OrderedCollection new.cliente:= OrderedCollection new."Esta funcion se utiliza para crear una instancia comercio y un cliente"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:42'!agregarComercio: nombre cuit: nroCuit tipo: tipoComercio 	"Esto sirve para inicializar una instancia de un tipo de comercio"			| com |	 	"Ve de que tipo es y crea una nueva instancia"		tipoComercio = 'Panaderia' ifTrue:[com:=Panaderia new].	tipoComercio = 'Verduleria' ifTrue:[com:=Verduleria new].	tipoComercio = 'Carniceria' ifTrue:[com:=Carniceria new].	tipoComercio = 'Dietetica' ifTrue:[com:=Dietetica new].	com setNombre: nombre.	com setCuit: nroCuit.	comercio add:com.		^comercio.		"Se utiliza para crear un comercio, se busca los valores de verdad en Comercio para asignar el tipo de comercio y se colocan los datos como el nombre y cuit del comercio"	! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:09'!registrarClienteEmpresa:nombre cuit:nroCuit|pcE|pcE:= ClienteEmpresa new.pcE setNombreCliente: nombre.pcE setCuitEmpresa: nroCuit.cliente add: pcE."Registra una empresa creando una instancia y coloca el nombre y el cuit de la empresa "! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:08'!productosEnDieteticaLlamados: nombre|aux retorno|aux:=comercio detect: [:i| i esDietetica ].retorno:=aux productoDietetica: nombre .^retorno."Esta funcion busca un producto en un tipo de comercio a partir de un parametro nombre, retorna todos los productos que tengan parte de ese nombre, utiliza una funcion definida en comercio para obtener todos los nombre"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:43'!agregarProducto: datosProducto enComercio: nroCuit	"Esta funcion se utiliza para agregar un producto a un comercio"	| aux1 retorno|			aux1:=comercio detect:[ :c | c getCuit = nroCuit].	"Busca el cuil en comercio"	retorno:=aux1 agregarProducto: datosProducto."Una vez encontrado el cuit le da los datos de producto a comercio para que los cargue"		^retorno. 	! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:04'!insertarPedido:idCliente comercio:cuit productos: listaItems|  aux item c i|item:=Array new:2.item at:1 put:(listaItems at:1). item at:2 put:(listaItems at:2).c:=cuit.i:=idCliente .aux := comercio detect: [:r| r getCuit=c ].aux agregarPedido:i pedidoComercio:c pedidoProductos: item."Esta funcion incerta pedido en un comercio, además de que utiliza tres funciones definidas en Comercio"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:07'!pedidosEntregadosDesde: fecha enComercio: nroCuit|aux retorno|aux:=comercio detect: [:i| i getCuit =nroCuit  ].retorno:=aux pedidosEntregadosDesde: fecha .^retorno."Esta funcion se utiliza para retornar que pedidos fueron enviados en una fecha determinada, una vez identificado el comercio mediante su nroCuit se llama a una funcion definida en comercio para poder realizar el retorno de que pedidos fueron enviados"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:46'!importeTotalVentasDia: fecha enComercio:nroCuit|aux retorno|aux := comercio detect: [:r| r getCuit=nroCuit  ].retorno:=aux importeTotalVentasDia: fecha.^retorno."Esta funcion se utiliza para obtener las ganancias de una fecha especifica de un comercio, se hace el llamado a otra funcion definida en comercio"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:08'!productosEnPanaderiaLlamados: nombre|aux retorno|aux:=comercio detect: [:i| i esPanaderia  ].retorno:=aux productoPanaderia: nombre .^retorno."Esta funcion busca un producto en un tipo de comercio a partir de un parametro nombre, retorna todos los productos que tengan parte de ese nombre, utiliza una funcion definida en comercio para obtener todos los nombre"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:41'!actualizarStock: codProducto nuevoValor:cantidad enComercio: nroCuit		| aux1 retorno|			aux1:=comercio detect:[ :c | c getCuit = nroCuit].	"Busca el cuil en comercio"	retorno:=aux1 actualizarStock: codProducto nuevoValor:cantidad ."Una vez encontrado el cuit le da los datos de producto a comercio para que los cargue"		^retorno.	"Esta funcion se utiliza para actualizar el stock a partir de los datos como el codProdcuto, cantidad y el norCuit se busca el producto y una vez obtenidos los datos se llama a una funcion definida en comercio para poder actualizar el Stock"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:08'!productosEnCarniceriaLlamados: nombre|aux retorno|aux:=comercio detect: [:i| i esCarniceria ].retorno:=aux productoCarniceria: nombre .^retorno."Esta funcion busca un producto en un tipo de comercio a partir de un parametro nombre, retorna todos los productos que tengan parte de ese nombre, utiliza una funcion definida en comercio para obtener todos los nombre"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:09'!registrarClientePersona:nombre apellido:ap dni:nroDoc|persona|persona :=ClientePersona new.persona setApellidoCliente: ap setDNICliente:nroDoc.persona setNombreCliente: nombre.cliente add:persona."Registra una un Cliente persona creando una instancia y coloca el nombre, apellido y el DNI de la persona "! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:44'!descargarPedidos: fecha enComercio:nroCuit|aux retorno|aux:=comercio detect: [:i| i getCuit =nroCuit  ].retorno:=aux descargarPedidos: fecha .^retorno. "Esta funcion se utiliza para obtener los pedidos en un comercio, se hace el llamado a otra funcion definida en comercio"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:05'!marcarPedidoEnviado: nroIdentificacion enComercio: nroCuit|aux retorno|aux:=comercio detect: [:i| i getCuit =nroCuit  ].retorno:=aux marcarPedidoEnviado: nroIdentificacion .^retorno."Esta funcion se utiliza para marcar un pedido como enviado, una vez identificado el comercio mediante su nroCuit se llama a una funcion definida en comercio para poder realizar la marca del pedido enviado"! !!GestorPublicacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:08'!productosEnVerduleriaLlamados: nombre|aux retorno|aux:=comercio detect: [:i| i esVerduleria].retorno:=aux productoVerduleria: nombre.^retorno."Esta funcion busca un producto en un tipo de comercio a partir de un parametro nombre, retorna todos los productos que tengan parte de ese nombre, utiliza una funcion definida en comercio para obtener todos los nombre"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GestorPublicacion class	instanceVariableNames: ''!!GestorPublicacion class methodsFor: 'instance creation'!new| temp |temp := super new.temp inicializar.^temp.! !Comercio subclass: #Panaderia	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!Panaderia methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:39'!esPanaderia^true."Valor de verdad del tipo de comercio"! !Object subclass: #Pedido	instanceVariableNames: 'idPedido fecha cliente productos total cuitComercio'	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!Pedido methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:10'!getCliente^cliente."retorna un dato clietne"! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:11'!getProducto^productos."Retorna un prodcuto"! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:12'!getTotal^total."Retorna el monto total de pedidos"! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:10'!actualizarFecha: fechaVfecha:=fechaV."funcion que se utiliza para setear una fecha"! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:11'!getIdPedido^idPedido ."Retorna la iD de un pedido"! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:10'!getCuit^cuitComercio."Retorna el cuit del comercio"! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:10'!getFecha^fecha."retorna una fecha "! !!Pedido methodsFor: 'initialization' stamp: 'Anonymous 9/23/2020 13:12'!setCliente: clientePedido setFecha:fechaPedido setIdPedido: idP setProducto: productoPedido setTotal: totalPedido setCuitComercio: cuitC		fecha:=fechaPedido.	productos := productoPedido .		idPedido := idP .	cliente := clientePedido .	total:= totalPedido.	cuitComercio:= cuitC.	"Esta funcion se utiliza para setear los valores de un pedido, se coloca fecha, el producto, la id del pedido, el cliente, el precio y el cuit del comercio"! !Object subclass: #Producto	instanceVariableNames: 'id nombre descripcion precio stock'	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!Producto methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:33'!getStock^stock."retorna el Stock de un producto"! !!Producto methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:33'!getPrecio^precio ."retorna el precio de un producto"! !!Producto methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:32'!getIdProducto^id."retorna la ID de un producto"! !!Producto methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:33'!inicializarProducto 	descripcion := OrderedCollection  new.	"se utiliza para crear una instancia de producto"! !!Producto methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:33'!setiDProducto: idP setNombreProducto:nombrep agregarDescripcion:descripcionp setprecioProducto:preciop setStock:pStockid:=idP.nombre :=nombrep.descripcion add: descripcionp.precio := preciop. stock:=pStock. "se utiliza para cargar los datos de un producto"! !!Producto methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:32'!actualizarStock: nuevoStockstock:=nuevoStock."Se utiliza para actualizar el stock de un producto "! !!Producto methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 13:32'!getNombreProducto ^nombre."retorna el nombre de un producto"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Producto class	instanceVariableNames: ''!!Producto class methodsFor: 'instance creation'!new 	"comment stating purpose of class-side message"	"scope: class-variables  &  class-instance-variables"					|producto |	producto:= super new.		producto inicializarProducto .	^producto.! !Comercio subclass: #Verduleria	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-POO-Etapa1_2.0'!!Verduleria methodsFor: 'as yet unclassified' stamp: 'Anonymous 9/23/2020 12:39'!esVerduleria^true."Valor de verdad del tipo de comercio"! !